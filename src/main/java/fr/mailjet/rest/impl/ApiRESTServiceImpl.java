package fr.mailjet.rest.impl;/* * #%L Mailjet %% Copyright (C) 2012 Pitton Olivier - olivier dot pitton at * gmail dot com %% Licensed under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance with the License. * You may obtain a copy of the License at * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law * or agreed to in writing, software distributed under the License is * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied. See the License for the specific language * governing permissions and limitations under the License. #L% */import java.util.List;import java.util.Map;import javax.ws.rs.core.MultivaluedMap;import com.sun.jersey.api.client.Client;import com.sun.jersey.api.client.UniformInterfaceException;import fr.mailjet.context.MailjetContext;import fr.mailjet.rest.ApiRESTService;import fr.mailjet.rest.EnumReturnType;import fr.mailjet.rest.parameters.EnumCustomStatus;import fr.mailjet.rest.parameters.EnumKeyAuthenticateParameters;/** * Une implémentation par défaut du service <i>API</i> *  * @author "Pitton Olivier <olivier dot pitton at gmail dot com>" *  */public final class ApiRESTServiceImpl extends AbstractRESTService implements ApiRESTService {	/**	 * Constructeur	 * @param parContext {@link MailjetContext} un contexte	 * @param parClient {@link Client} un client HTTP	 */	ApiRESTServiceImpl(final MailjetContext parContext, final Client parClient) {		super(parContext, parClient);	}	@Override	public final String keyList(final EnumReturnType parType, final Boolean parIsActive) throws UniformInterfaceException {		return keyList(parType, parIsActive, null);	}	@Override	public final String keyList(final EnumReturnType parType, final Boolean parIsActive, final EnumCustomStatus parStatus)			throws UniformInterfaceException {		return keyList(parType, parIsActive, parStatus, null);	}	@Override	public final String keyList(final EnumReturnType parType, final Boolean parIsActive, final EnumCustomStatus parStatus, final String parName)			throws UniformInterfaceException {		return keyList(parType, parIsActive, parStatus, parName, null);	}	@Override	public final String keyList(final EnumReturnType parType, final Boolean parIsActive, final EnumCustomStatus parStatus, final String parName,			final Boolean parUserType) throws UniformInterfaceException {		final MultivaluedMap<String, String> locProperties = createHTTPProperties(parType);		// On ajoute l'ensemble des propriétés non null		// active property		if (parIsActive != null) {			// 1 : active - 0 : inactive			final int locActiveValue = (parIsActive.booleanValue()) ? 1 : 0;			locProperties.putSingle(_activeProperty, Integer.toString(locActiveValue));		}		// custom property		if (parStatus != null) {			locProperties.putSingle(_customStatusProperty, parStatus.getValue());		}		// name property		if (parName != null) {			locProperties.putSingle(_nameProperty, parName);		}		// type property		if (parUserType != null) {			// 1 : main / 0 : subuser			final int locTypeValue = (parUserType.booleanValue()) ? 1 : 0;			locProperties.putSingle(_typeProperty, Integer.toString(locTypeValue));		}		return createGETRequest("apiKeylist", locProperties);	}	@Override	public final String keySecret(final EnumReturnType parType) throws UniformInterfaceException {		final MultivaluedMap<String, String> locMap = createHTTPProperties(parType);		locMap.putSingle(_apiKeyProperty, _context.getApiKey());		return createGETRequest("apiKeysecret", locMap);	}	@Override	public final String keySecretChange(final EnumReturnType parType) throws UniformInterfaceException {		final MultivaluedMap<String, String> locMap = createHTTPProperties(parType);		locMap.putSingle(_apiKeyProperty, _context.getApiKey());		return createGETRequest("apiKeysecretchange", locMap);	}	@Override	public final String keyAdd(final EnumReturnType parType, final String parCustomName) throws UniformInterfaceException, IllegalArgumentException {		return keyAdd(parType, parCustomName, null);	}	@Override	public final String keyAdd(final EnumReturnType parType, final String parCustomName, final EnumCustomStatus parStatus)			throws UniformInterfaceException, IllegalArgumentException {		if (parCustomName == null || parCustomName.isEmpty()) {			throw new IllegalArgumentException();		}		final MultivaluedMap<String, String> locParameters = createHTTPProperties(parType);		locParameters.putSingle(_nameProperty, parCustomName);		if (parStatus != null) {			locParameters.putSingle(_customStatusProperty, parStatus.getValue());		}		return createPOSTRequest("apiKeyAdd", locParameters);	}	@Override	public final String keyAuthenticate(final EnumReturnType parType, final List<String> parAllowedAccess) throws UniformInterfaceException,			IllegalArgumentException {		return keyAuthenticate(parType, parAllowedAccess, null);	}	@Override	public final String keyAuthenticate(final EnumReturnType parType, final List<String> parAllowedAccess,			final Map<EnumKeyAuthenticateParameters, String> parParameters) throws UniformInterfaceException, IllegalArgumentException {		final MultivaluedMap<String, String> locMap = createHTTPProperties(parType);		locMap.putSingle(_apiKeyProperty, getContext().getApiKey());		if (parAllowedAccess == null || parAllowedAccess.isEmpty()) {			throw new IllegalArgumentException();		}		locMap.put(_defaultAccessProperty, parAllowedAccess);		if (parParameters != null) {			for (final Map.Entry<EnumKeyAuthenticateParameters, String> locEntry : parParameters.entrySet()) {				locMap.putSingle(locEntry.getKey().getValue(), locEntry.getValue());			}		}		return createPOSTRequest("apiKeyauthenticate", locMap);	}	@Override	public final String keyUpdate(final EnumReturnType parType) throws UniformInterfaceException {		return keyUpdate(parType, getContext().getApiKey());	}	@Override	public final String keyUpdate(final EnumReturnType parType, final String parApiKey) throws UniformInterfaceException, IllegalArgumentException {		return keyUpdate(parType, parApiKey, null);	}	@Override	public final String keyUpdate(final EnumReturnType parType, final String parApiKey, final EnumCustomStatus parStatus)			throws UniformInterfaceException, IllegalArgumentException {		return keyUpdate(parType, parApiKey, parStatus, null);	}	@Override	public final String keyUpdate(final EnumReturnType parType, final String parApiKey, final EnumCustomStatus parStatus, final String parName)			throws UniformInterfaceException, IllegalArgumentException {		final MultivaluedMap<String, String> locMap = createHTTPProperties(parType);		if (parApiKey == null || parApiKey.isEmpty()) {			throw new IllegalArgumentException();		}		locMap.putSingle(_apiKeyProperty, parApiKey);		if (parStatus != null) {			locMap.putSingle(_customStatusProperty, parStatus.getValue());		}		if (parName != null && parName.isEmpty() == false) {			locMap.putSingle(_nameProperty, parName);		}		return createPOSTRequest("apiKeyupdate", locMap);	}}