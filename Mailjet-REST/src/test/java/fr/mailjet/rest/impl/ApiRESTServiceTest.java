package fr.mailjet.rest.impl;/* *  Mailjet %% Copyright (C) 2012 Pitton Olivier - olivier dot pitton at * gmail dot com %% Licensed under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance with the License. * You may obtain a copy of the License at * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law * or agreed to in writing, software distributed under the License is * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied. See the License for the specific language * governing permissions and limitations under the License. #L% */import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertNotNull;import org.junit.AfterClass;import org.junit.Test;import fr.mailjet.context.MailjetContext;import fr.mailjet.rest.ApiRESTService;import fr.mailjet.rest.parameters.EnumCustomStatus;import fr.mailjet.rest.parameters.EnumReturnType;/** * Tests unitaires du service "api" *  * @see ApiRESTService * @author Pitton Olivier *  */public class ApiRESTServiceTest extends AbstractServiceTestBase {	// En static pour close après les tests.	static private ApiRESTService _service;	@AfterClass	static final public void afterClass() {		_service.close();		_service = null;	}	public ApiRESTServiceTest(EnumReturnType parType) {		super(parType);		_service = new RESTServiceFactory(_context).createApiService();	}	@Test(timeout = 1000L)	public void testGetContext() {		assertEquals(_context, _service.getContext());	}	@Test(timeout = 1000L)	public void testSetContext() {		_service.setContext(new MailjetContext("test", "test"));		assertFalse(_service.getContext().equals(_context));		_service.setContext(_context);	}	@Test(timeout = 10000L)	public void testKeyListEnumReturnTypeBoolean() {		String locResult = _service.keyList(_type, Boolean.TRUE);		// Ne contient pas la propriété "status"		assertNotNull(locResult);		assertFalse(locResult.isEmpty());		checkParameter(locResult, "apikey", _context.getApiKey());		checkParameter(locResult, "active" , Integer.valueOf(1));	}	@Test(timeout = 10000L)	public void testKeyListEnumReturnTypeBooleanEnumCustomStatus() {		EnumCustomStatus locStatus = EnumCustomStatus.UP;		String locResult = _service.keyList(_type, Boolean.TRUE, locStatus);		// Ne contient pas la propriété "status"		assertNotNull(locResult);		assertFalse(locResult.isEmpty());		checkParameter(locResult, "apikey", _context.getApiKey());		checkParameter(locResult, "active", Integer.valueOf(1));		checkParameter(locResult, "custom_status", locStatus.getConstName());	}	@Test(timeout = 10000L)	public void testKeyListEnumReturnTypeBooleanEnumCustomStatusString() {		EnumCustomStatus locStatus = EnumCustomStatus.UP;		String locNameValue = "user";		String locResult = _service.keyList(_type, Boolean.TRUE, locStatus, locNameValue);		// Ne contient pas la propriété "status"		assertNotNull(locResult);		assertFalse(locResult.isEmpty());		checkParameter(locResult, "apikey", _context.getApiKey());		checkParameter(locResult, "active", Integer.valueOf(1));		checkParameter(locResult, "custom_status", locStatus.getConstName());		checkParameter(locResult, "name", locNameValue);	}	@Test(timeout = 10000L)	public void testKeyListEnumReturnTypeBooleanEnumCustomStatusStringBoolean() {		EnumCustomStatus locStatus = EnumCustomStatus.UP;		String locNameValue = "user";		String locResult = _service.keyList(_type, Boolean.TRUE, locStatus, locNameValue, Boolean.TRUE);		// Ne contient pas la propriété "status"		assertNotNull(locResult);		assertFalse(locResult.isEmpty());		checkParameter(locResult, "apikey", _context.getApiKey());		checkParameter(locResult, "active", Integer.valueOf(1));		checkParameter(locResult, "custom_status", locStatus.getConstName());		checkParameter(locResult, "name", locNameValue);		checkParameter(locResult, "type", "main");	}	@Test(timeout = 10000L)	public void testKeyListEnumReturnTypeMultivaluedMapOfStringString() {		String locResult = _service.keyList(_type, Boolean.TRUE, EnumCustomStatus.UP, "main", Boolean.TRUE);		assertNotNull(locResult);		assertFalse(locResult.isEmpty());		checkStatus(locResult);	}	@Test(timeout = 10000L)	public void testKeySecret() {		String locResult = _service.keySecret(_type);		assertNotNull(locResult);		assertFalse(locResult.isEmpty());		checkParameter(locResult, "secretkey", _context.getSecretKey());	}	@Test(timeout = 10000L)	public void testKeySecretChange() {		_logger.warning("Not tested because not idempotent");	}	@Test(timeout = 10000L)	public void testKeyAdd() {		_logger.warning("Not tested because need a premium account");	}	@Test(timeout = 10000L)	public void testKeyAuthenticate() {		_logger.warning("Not tested because need a premium account");	}	@Test(timeout = 10000L)	public void testKeyUpdate() {		_logger.warning("Not tested because need a premium account");	}}