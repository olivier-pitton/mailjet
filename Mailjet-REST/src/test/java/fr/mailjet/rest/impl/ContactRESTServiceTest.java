package fr.mailjet.rest.impl;/* *  * Mailjet * %% * Copyright (C) 2012 Pitton Olivier - olivier dot pitton at gmail dot com * %% * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * #L% */import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import java.util.HashMap;import java.util.Map;import org.junit.AfterClass;import org.junit.Test;import fr.mailjet.context.MailjetContext;import fr.mailjet.rest.ContactRESTService;import fr.mailjet.rest.parameters.EnumReturnType;/** * Tests unitaires du service "contact" *  * @see ContactRESTService * @author Pitton Olivier *  */public class ContactRESTServiceTest extends AbstractServiceTestBase {	// En static final pour close après les tests.	static private ContactRESTService _service;	@AfterClass	static final public void afterClass() {		_service.close();		_service = null;	}	public ContactRESTServiceTest(EnumReturnType parType) {		super(parType);		_service = new RESTServiceFactory(_context).createContactService();	}	@Test(timeout = 1000L)	public void testGetContext() {		assertEquals(_context, _service.getContext());	}	@Test(timeout = 1000L)	public void testSetContext() {		_service.setContext(new MailjetContext("test", "test"));		assertFalse(_service.getContext().equals(_context));		_service.setContext(_context);	}	@Test(timeout = 10000L)	public void testInfos() {		String locResult = _service.infos(_type, MAIL);		checkStatus(locResult);		// On ne check pas quand il s'agit du HTML car renvoie une liste		checkParameter(locResult, "email", MAIL);	}	@Test(timeout = 3000L, expected = IllegalArgumentException.class)	public void testInfosIllegalArgumentException() {		_service.infos(_type, null);	}	@Test(timeout = 10000L)	public void testList_EnumReturnType() {		String locResult = _service.list(_type);		// On considère que le status vérifie la validité du test, afin de ne pas le		// rendre dépendant d'une liste de contacts		checkStatus(locResult);	}	@Test(timeout = 10000L)	public void testList_EnumReturnType_EnumMap() {		Map<String, String> locParameters = new HashMap<String, String>(2);		locParameters.put("limit", "1");		locParameters.put("blocked", "1");		String locResult = _service.list(_type, locParameters);		// On considère que le status vérifie la validité du test, afin de ne pas le		// rendre dépendant d'une liste de contacts		checkStatus(locResult);	}	@Test(timeout = 10000L)	public void testOpeners_EnumReturnType() {		String locResult = _service.openers(_type);		// On considère que le status vérifie la validité du test, afin de ne pas le		// rendre dépendant d'une liste de contacts		checkStatus(locResult);	}	@Test(timeout = 10000L)	public void testOpeners_EnumReturnType_Long() {		String locResult = _service.openers(_type, null);		// On considère que le status vérifie la validité du test, afin de ne pas le		// rendre dépendant d'une liste de contacts		checkStatus(locResult);	}	@Test(timeout = 10000L)	public void testOpeners_3args() {		String locResult = _service.openers(_type, null, Integer.valueOf(1));		checkStatus(locResult);		checkParameter(locResult, "total_cnt", "1");	}	@Test(timeout = 10000L)	public void testOpeners_4args() {		String locResult = _service.openers(_type, null, Integer.valueOf(1), Integer.valueOf(0));		checkStatus(locResult);		checkParameter(locResult, "total_cnt", "1");	}}